
@{
    ViewBag.Title = "SubmitForRequired";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model HW.LabStore.Entity.ApprovalWorkflowModel
<style type="text/css">
        .number {
            text-align: right;
        }
        table {
            width: 1300px;
            min-height: 25px;
            line-height: 25px;
            border-color: #b6ff00;
            border-collapse: collapse;
            border: 1px;
        }
        table, table tr th, table tr td {
            border: 1px solid #0094ff;
        }
        table thead {
            background-color: #139F5B;
            color: white;
            font-size: larger;
            text-align: center;
        }
</style>
<table id="table" class="table">
    <thead>
    <tr>
        <td></td>
        <td>@Model.IntermediateResult.PTDHeader</td>
        <td>@Model.IntermediateResult.FirstHeader</td>
        <td>@Model.IntermediateResult.RevisedHeader</td>
        <td>@Model.IntermediateResult.CostSheetHeader</td>
        <td>@Model.IntermediateResult.ProposedHeader</td>
        <td>@Model.IntermediateResult.VarianceHeader</td>
        <td>@Model.IntermediateResult.NetHeader</td>
        <td>Change for Reason / Remarks</td>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>Revenue</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.PTDRevenue)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.FirstRevenue)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.RevisedRevenue)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.CostSheetRevenue)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.ProposedRevenue)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.VarianceRevenue)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.NetRevenue)</td>
        <td><input id="revenueRemark" name="revenueRemark" style="width: 210px;height: 30px"/></td>
    </tr>
    <tr>
        <td>Cost</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.PTDCost)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.FirstCost)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.RevisedCost)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.CostSheetCost)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.ProposedCost)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.VarianceCost)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.NetCost)</td>
        <td><input id="costRemark" name="costRemark" style="width: 210px;height: 30px"/></td>
    </tr>
    <tr>
        <td>Margin ($)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.PTDMargin)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.FirstMargin)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.RevisedMargin)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.CostSheetMargin)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.ProposedMargin)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.VarianceMargin)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.NetMargin)</td>
        <td></td>
    </tr>
    <tr>
        <td>Margin (%)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.PTDMarginPrecent)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.FirstMarginPrecent)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.RevisedMarginPrecent)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.CostSheetMarginPrecent)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.PropsoedMarginPrecent)</td>
        <td class="number">@Html.NumberToStringRed(Model.IntermediateResult.VarianceMarginPrecent)</td>
        <td class="number">@Html.NumberToString(Model.IntermediateResult.NetMarginPrecent)</td>
        <td></td>
    </tr>
    <tr>
        <td>Margin Erosion</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td class="number">@Html.NumberToStringRed(Model.IntermediateResult.MarginErosion)</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td colspan="2">Approving Authority</td>
        <td>@Model.IntermediateRemark.FirstApprovingAuthority</td>
        <td>@Model.IntermediateRemark.RevisedApprovingAuthority</td>
        <td></td>
        <td>@Model.IntermediateRemark.ProposedApprovingAuthority</td>
        <td></td>
        <td></td>
        <td>@Model.IntermediateRemark.CommontRemark</td>
    </tr>
    </tbody>
</table>

<script type="text/javascript">
    var tTD;
    var table = document.getElementById("table");
    for (j = 0; i < table.row[0].cells.length; j++) {
        table.rows[0].cells[j].onmousedown = function() {
            tTD = this;
            if (event.offsetX > tTD.offsetWidth - 10) {
                tTD.mouseDown = true;
                tTD.oldX = event.x;
                tTD.oldWidth = tTD.offsetWidth;
            }
        };

        table.rows[0].cells[j].onmouseup = function() {
            if (tTD == undefined) tTD = this;
            tTD.mouseDown = false;
            tTD.style.cursor = 'default';
        }

        table.row[0].cells[j].onmousemove = function() {

            if (event.offsetX > this.offsetWidth - 10) {
                this.style.cursor = 'col-resize';
            } else {
                this.style.cursor = 'default';
            }

            if (tTD == undefined) {
                tTD = this;
            }
            if (tTD.mouseDown != null && tTD.mouseDown == true) {
                
            }
        }
    }
</script>