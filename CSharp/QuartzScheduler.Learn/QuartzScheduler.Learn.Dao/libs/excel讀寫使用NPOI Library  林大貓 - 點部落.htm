<!DOCTYPE HTML>
<!-- saved from url=(0062)https://dotblogs.com.tw/killysss/archive/2010/01/27/13344.aspx -->
<!DOCTYPE html PUBLIC "" ""><HTML class="no-js" lang="zh-tw"><HEAD prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><META 
content="IE=11.0000" http-equiv="X-UA-Compatible">
     
<META charset="utf-8">     
<META http-equiv="x-dns-prefetch-control" content="on">     <LINK href="//dotblogsfile.blob.core.windows.net" 
rel="dns-prefetch">     <LINK href="//az788688.vo.msecnd.net" 
rel="dns-prefetch">     <LINK href="//az787680.vo.msecnd.net" 
rel="dns-prefetch">     <LINK href="//www.google-analytics.com" rel="dns-prefetch"> 
    <LINK href="//maxcdn.bootstrapcdn.com" rel="dns-prefetch">     
<META name="viewport" content="width=device-width, initial-scale=1.0">     <LINK 
href="/favicon.ico" rel="icon">     
<META content="1278595205" property="fb:admins">     
<META content="https://www.facebook.com/Dotblogs" property="article:publisher">  
   
<META name="msapplication-TileColor" content="#156B00">     
<META name="msapplication-square70x70logo" content="/tiny.png">     
<META name="msapplication-square150x150logo" content="/square.png">     
<META name="msapplication-wide310x150logo" content="/wide.png">     
<META name="msapplication-square310x310logo" content="/large.png">     <LINK 
href="/favicon.ico" rel="shortcut icon" type="image/x-icon">     <LINK href="/apple-touch-icon.png" 
rel="apple-touch-icon">     <LINK href="/apple-touch-icon-57x57.png" rel="apple-touch-icon" 
sizes="57x57">     <LINK href="/apple-touch-icon-72x72.png" rel="apple-touch-icon" 
sizes="72x72">     <LINK href="/apple-touch-icon-76x76.png" rel="apple-touch-icon" 
sizes="76x76">     <LINK href="/apple-touch-icon-114x114.png" rel="apple-touch-icon" 
sizes="114x114">     <LINK href="/apple-touch-icon-120x120.png" rel="apple-touch-icon" 
sizes="120x120">     <LINK href="/apple-touch-icon-144x144.png" rel="apple-touch-icon" 
sizes="144x144">     <LINK href="/apple-touch-icon-152x152.png" rel="apple-touch-icon" 
sizes="152x152">     <LINK href="/apple-touch-icon-180x180.png" rel="apple-touch-icon" 
sizes="180x180">     <LINK href="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/font-awesome.min.css" 
rel="stylesheet">     <LINK href="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/copyright_demoshop.tw_.css" 
rel="stylesheet">     
<SCRIPT type="text/javascript">var appInsights = window.appInsights || function (config) { function r(config) { t[config] = function () { var i = arguments; t.queue.push(function () { t[config].apply(t, i) }) } } var t = { config: config }, u = document, e = window, o = "script", s = u.createElement(o), i, f; for (s.src = config.url || "//az416426.vo.msecnd.net/scripts/a/ai.0.js", u.getElementsByTagName(o)[0].parentNode.appendChild(s), t.cookie = u.cookie, t.queue = [], i = ["Event", "Exception", "Metric", "PageView", "Trace"]; i.length;) r("track" + i.pop()); return r("setAuthenticatedUserContext"), r("clearAuthenticatedUserContext"), config.disableExceptionTracking || (i = "onerror", r("_" + i), f = e[i], e[i] = function (config, r, u, e, o) { var s = f && f(config, r, u, e, o); return s !== !0 && t["_" + i](config, r, u, e, o), s }), t }({ instrumentationKey: "82bbb2a0-0481-4a55-801a-b98a9fe74014" }); window.appInsights = appInsights; appInsights.trackPageView(); </SCRIPT>
         
<SCRIPT>(function (i, s, o, g, r, a, m) { i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o), m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m) })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga'); </SCRIPT>
         <TITLE>excel讀寫使用NPOI Library | 林大貓 - 點部落</TITLE>     <LINK href="//fonts.googleapis.com" 
rel="dns-prefetch">     
<SCRIPT type="application/ld+json">{"@context" : "http://schema.org","@type" : "Article","mainEntityOfPage":{"@type":"WebPage","@id":"https://dotblogs.com.tw/killysss/series/1?qq=C%2523"},"image":{"@type":"ImageObject","url":"https://az788688.vo.msecnd.net/assets/img/dotblog-logo_600_60.png?v=2017.7.10.2","height":700,"width":350},"headline" : "excel讀寫使用NPOI Library","author" : { "@type" : "Person", "name" : "killysss" },"datePublished" : "
2010-01-27
   ","dateModified" : "
2010-01-27
   ","url" : "https://dotblogs.com.tw/killysss/2010/01/27/13344","publisher" : { "@type" : "Organization", "name" : "點部落" , "logo": { "@type": "ImageObject","url": "https://az788688.vo.msecnd.net/assets/img/dotblog-logo_600_60.png?v=2017.7.10.2","width": 600,"height": 60} }}</SCRIPT>
     
<META name="description" content="excel讀寫使用NPOI Library">     
<META content="excel讀寫使用NPOI Library" property="og:description">     
<META content="excel讀寫使用NPOI Library | 林大貓" property="og:title">     
<META content="article" property="og:type">     
<META name="Author" content="林大貓">     
<META name="msapplication-notification" content="frequency=30;polling-uri=http://notifications.buildmypinnedsite.com/?feed=http://dotblogs.com.tw/killysss/rss&amp;id=1;polling-uri2=http://notifications.buildmypinnedsite.com/?feed=http://dotblogs.com.tw/killysss/rss&amp;id=2;polling-uri3=http://notifications.buildmypinnedsite.com/?feed=http://dotblogs.com.tw/killysss/rss&amp;id=3; cycle=1"> 
        
<META content="林大貓" property="og:site_name">             
<META content="https://az788688.vo.msecnd.net/assets/img/fb_square.png?v=2017.7.10.2" 
property="og:image">                 <LINK href="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/theme-light.css" 
rel="stylesheet">             <LINK href="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/vs.min.css" 
rel="stylesheet">     <!--bloger custom begin-->     
<STYLE>.share-buttons{
	list-style: none;
}

.share-buttons li{
	display: inline;
}</STYLE>
     <!--bloger custom end-->     <LINK href="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/css.css" 
rel="stylesheet" type="text/css">         
<SCRIPT src="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/f.txt" async=""></SCRIPT>
     
<SCRIPT src="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/highlight.pack.js"></SCRIPT>
         
<SCRIPT> ga('create', 'UA-3283859-1', 'auto'); ga('send', 'pageview');</SCRIPT>
 
<META name="GENERATOR" content="MSHTML 11.00.9600.18763"></HEAD> 
<BODY>
<DIV class="top-wrapper"><HEADER class="page-header"><NAV class="navbar-top">
<DIV class="center-container">
<DIV class="search-block mobi-only">
<FORM action="/killysss/search" 
method="get"><INPUT name="q" type="text" placeholder="請用「空白」區分關鍵字" value=""><BUTTON><I 
class="fa fa-search"></I></BUTTON></FORM></DIV>
<DIV class="mobi-only nav-menu--mobi" data-use="main-menu"><BUTTON><I class="fa fa-bars"></I></BUTTON> 
                
<DIV class="drop-down"></DIV></DIV>
<UL class="nav-menu mobi-hide" data-menu="main-menu">
  <LI><A href="https://dotblogs.com.tw/">點部落</A></LI>
  <LI><A href="https://dotblogs.com.tw/killysss/1">首頁</A></LI>
  <LI><A href="https://dotblogs.com.tw/killysss/rss" rel="alternate" type="application/rss+xml">訂閱RSS</A></LI>
  <LI>
<SCRIPT src="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/loginstate.js"></SCRIPT>
  </LI></UL></DIV></NAV>
<DIV class="page-header__container" id="dotblog-header">
<DIV class="center-container">
<H1 class="page-header__title"><A 
href="https://dotblogs.com.tw/killysss/1">林大貓</A></H1>
<H2 class="page-header__subtitle">●●●學習筆記及問題處理過程●●●</H2></DIV></DIV></HEADER>
<DIV class="main-wrapper">
<DIV class="center-container">
<DIV class="content-wrapper"><ARTICLE class="article"><HEADER class="article__header">
<DIV class="article__date"><SPAN>2010-01-27    </SPAN>                           
                  </DIV>
<H3 class="article__title">excel讀寫使用NPOI Library</H3>
<UL class="article__status">
  <LI><I class="fa fa-eye"></I>90356</LI>
  <LI><I class="fa fa-comments-o"></I>                             <A href="https://dotblogs.com.tw/killysss/2010/01/27/13344#disqus_thread">0</A> 
                          </LI>
  <LI><I class="fa fa-list-ul"></I><A href="https://dotblogs.com.tw/killysss/series/1?qq=C%2523">C#</A></LI>
  <LI><I class="fa fa-exclamation-circle"></I>                             <A 
  href="javascript:void(0);" data-url="/blog/accuseofarticle/60fc6893-8802-4a4c-b09d-7ca445ba748f" 
  data-lightbox="">檢舉文章</A>                         </LI></UL></HEADER>
<DIV class="article__content">
<DIV class="article__desc">
<P>excel讀寫使用NPOI Library</P></DIV>
<P>參考了下列資料後</P>
<P><A href="http://msdn.microsoft.com/zh-tw/ee818993.aspx" target="_blank">在 
Server 端存取 Excel 檔案的利器：NPOI Library</A></P>
<P>改寫一下方便自己使用</P>
<P>參考文獻：</P>
<P>在 Server 端存取 Excel 檔案的利器：NPOI Library</P>
<P><A 
href="http://msdn.microsoft.com/zh-tw/ee818993.aspx">http://msdn.microsoft.com/zh-tw/ee818993.aspx</A></P>
<P>小弟將其中的函式改寫應用，歡迎自由散布修改，有空將不定期改寫。</P>
<P>請於aspx.cs引用</P>
<P>using NPOI.HSSF.UserModel;</P>
<P>請於aspx.vb引用</P>
<P>Imports NPOI.HSSF.UserModel;</P>
<P>輸出格式主要有兩種：</P>
<P>客戶端（Client）：將資料轉成位元流（Stream）後，在網頁中下載。</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:69d6d375-c239-4955-b0c8-70f1fe54f359" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
        MemoryStream ms2 = ExcelUtility.SetFormula(ExcelUtility.RenderDataTableToExcel(table),0,"cos(5)+sin(10)",0,0) as MemoryStream;       
       // // 設定強制下載標頭。
        Response.AddHeader("Content-Disposition", string.Format("attachment; filename=Download.txt"));
        // 輸出檔案。        
        Response.BinaryWrite(ms.ToArray());
</CODE></PRE></DIV> 
<P>主機端（Server）；將資料轉成檔案（File）後，存在主機。</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:2c09dbdb-3bf7-4067-906e-14ce8e99824e" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
        MemoryStream ms2 = ExcelUtility.SetFormula(ExcelUtility.RenderDataTableToExcel(table),0,"cos(5)+sin(10)",0,0) as MemoryStream;             
        //將資料輸出到主機的檔案aaa.xls
        ExcelUtility.SetGridLine(Server.MapPath("./aaa.xls"), ms2, false, new int[] { 0 });
</CODE></PRE></DIV> 
<P>函式說明：</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:d2a61ebd-6172-41c8-aba3-d92922c13744" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
public static Stream RenderDataTableToExcel(DataTable SourceTable)
/// 將DataTable轉成Workbook(自定資料型態)輸出.
public static HSSFWorkbook RenderDataTableToWorkBook(DataTable SourceTable)
/// 將DataTable資料輸出成檔案.
public static void RenderDataTableToExcel(DataTable SourceTable, string FileName)
/// 從位元流讀取資料到DataTable.
public static DataTable RenderDataTableFromExcel(Stream ExcelFileStream, string SheetName, int HeaderRowIndex, bool HaveHeader)
/// 從位元流讀取資料到DataTable.
public static DataTable RenderDataTableFromExcel(Stream ExcelFileStream, int SheetIndex, int HeaderRowIndex, bool HaveHeader)
/// 將陣列輸出成位元流.
public static Stream RenderArrayToExcel(string ColumnName, string[,] SourceTable)
/// 將陣列輸出成檔案.
public static void RenderArrayToExcel(string FileName, string ColumnName, string[,] SourceTable)
/// 將陣列輸出成WorkBook(自訂資料型態).
public static HSSFWorkbook RenderArrayToWorkBook(string ColumnName, string[,] SourceTable)
/// 將位元流資料輸出成陣列.
public static string[,] RenderArrayFromExcel(Stream ExcelFileStream, string SheetName, int HeaderRowIndex, bool HaveHeader)
/// 將位元流資料輸出成陣列.
public static string[,] RenderArrayFromExcel(Stream ExcelFileStream, int SheetIndex, int HeaderRowIndex, bool HaveHeader)
/// 在位元流儲存格中建立超連結.
public static Stream MakeLink(Stream InputStream, string SheetNameOrIndex, string LinkName, string LinkValueOrIndex, LinkType s1, int RowIndex, int CellIndex)
/// 在檔案儲存格中建立超連結.
public static void MakeLink(string FileName, Stream InputStream, string SheetNameOrIndex, string LinkName, string LinkValueOrIndex, LinkType s1, int RowIndex, int CellIndex)
/// 建立新位元流並在儲存格中建立超連結.
public static Stream MakeLinkFromEmpty(string SheetNameOrIndex, string LinkName, string LinkValueOrIndex, LinkType s1, int RowIndex, int CellIndex)
/// 建立新檔案並在儲存格中建立超連結.
public static void MakeLinkFromEmpty(string FileName, string SheetNameOrIndex, string LinkName, string LinkValueOrIndex, LinkType s1, int RowIndex, int CellIndex)
/// 設定字體顏色大小到位元流.
public static Stream ApplyStyleToFile(Stream InputStream, string FontName, short FontSize, bool IsAllSheet, params string[] SheetName)
/// 設定字體顏色大小到位元流.
public static Stream ApplyStyleToFile(Stream InputStream, string FontName, short FontSize, bool IsAllSheet, params int[] SheetIndex)
/// 設定字體顏色大小到檔案.
public static void ApplyStyleToFile(string FileName, Stream InputStream, string FontName, short FontSize, bool IsAllSheet, params string[] SheetName)
/// 設定字體顏色大小到檔案.
public static void ApplyStyleToFile(string FileName, Stream InputStream, string FontName, short FontSize, bool IsAllSheet, params int[] SheetIndex)
/// 建立空白excel檔到位元流.
public static Stream CreateEmptyFile(params string[] SheetName)
/// 建立空白excel檔到檔案.
public static void CreateEmptyFile(string FileName, params string[] SheetName)
/// 設定格線到位元流.
public static Stream SetGridLine(Stream InputSteam, bool haveGridLine, params string[] SheetName)
/// 設定格線到位元流.
public static Stream SetGridLine(Stream InputSteam, bool haveGridLine, params int[] SheetIndex)
/// 設定格線到檔案.
public static void SetGridLine(string FileName, Stream InputSteam, bool haveGridLine, params int[] SheetIndex)
/// 設定格線到檔案.
public static void SetGridLine(string FileName, Stream InputSteam, bool haveGridLine, params string[] SheetName)
/// 從位元流將資料轉成字串輸出
public static string ExtractStringFromFileStream(Stream InputStream)
/// 從檔案將資料轉成字串輸出
public static string ExtractStringFromFileStream(string FileName)
/// 設定群組到位元流.
public static Stream CreateGroup(string SheetName, bool IsRow, int From, int End)
/// 建立群組到檔案.
public static void CreateGroup(string FileName,string SheetName, bool IsRow, int From, int End)
/// 從樣板建立位元流.
public static Stream CreateFileStreamFromTemplate(string TemplateFileName)
/// 從樣板建立檔案.
public static void CreateFileFromTemplate(string TemplateFileName,string OutputFileName)
/// 嵌入圖片到位元流.
public static Stream EmbedImage(Stream InputStream,int SheetIndex,string PicFileName, bool IsOriginalSize , int[] RowPosition)
/// 嵌入圖片到檔案.
public static void EmbedImage(string FileName, int SheetIndex, Stream InputStream, string PicFileName, bool IsOriginalSize, int[] RowPosition)
/// 建立新位元流並嵌入圖片.
public static Stream EmbedImage(string PicFileName, bool IsOriginalSize, int[] RowPosition)
/// 建立新檔案並嵌入圖片.
public static void EmbedImage(string ExcelFileName, string PicFileName, bool IsOriginalSize, int[] RowPosition)
/// 合併儲存格於位元流.
public static Stream MergeCell(Stream InputStream, int SheetIndex, int RowFrom, int ColumnFrom, int RowTo, int ColumnTo)
/// 合併儲存格於檔案.
public static void MergeCell(string FileName, Stream InputStream, int SheetIndex, int RowFrom, int ColumnFrom, int RowTo, int ColumnTo)
/// 建立新位元流並合併儲存格.
public static Stream MergeCell(int RowFrom, int ColumnFrom, int RowTo, int ColumnTo)
/// 建立新檔案並合併儲存格.
public static void MergeCell(string FileName , int RowFrom, int ColumnFrom, int RowTo, int ColumnTo)
/// 設定儲存格公式於位元流.
public static Stream SetFormula(Stream InputStream,int SheetIndex , string Formula, int RowIndex, int ColumnIndex)
/// 設定儲存格公式於檔案.
public static void SetFormula(string FileName,Stream InputStream, int SheetIndex, string Formula, int RowIndex, int ColumnIndex)
/// 建立新位元流並設定儲存格公式.
public static Stream SetFormula(string Formula, int RowIndex, int ColumnIndex)
/// 建立新檔案並設定儲存格公式.
public static void SetFormula(string FileName, string Formula, int RowIndex, int ColumnIndex)
</CODE></PRE></DIV> 
<P>以下為程序碼</P>
<P>
<P>
<P>定義及初始化</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:0e6d3504-b1f2-4d4c-831e-58e6e9b75cde" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Web;
using NPOI;
using NPOI.HPSF;
using NPOI.HSSF;
using NPOI.HSSF.UserModel;
using NPOI.POIFS;
using NPOI.Util;
using NPOI.HSSF.Util;
using NPOI.HSSF.Extractor;
using System.Web.UI.HtmlControls;

public static class ExcelUtility
{
    public static HSSFWorkbook workbook;
    [Flags]
    public enum LinkType
    {
        網址,
        檔案,
        郵件,
        內文
    };    
    public static void InitializeWorkbook()
    {
        ////create a entry of DocumentSummaryInformation
        if (workbook == null)
            workbook = new HSSFWorkbook();
        //HSSFFont font1 = workbook.CreateFont();
        //HSSFCellStyle Style = workbook.CreateCellStyle();
        //font1.FontHeightInPoints = 10;
        //font1.FontName = "新細明體";
        //Style.SetFont(font1);
        //for (int i = 0; i &lt; workbook.NumberOfSheets; i++)
        //{
        //    HSSFSheet Sheets = workbook.GetSheetAt(0);
        //    for (int k = Sheets.FirstRowNum; k &lt;= Sheets.LastRowNum; k++)
        //    {
        //        HSSFRow row = Sheets.GetRow(k);
        //        for (int l = row.FirstCellNum; l &lt; row.LastCellNum; l++)
        //        {
        //            HSSFCell Cell = row.GetCell(l);
        //            Cell.CellStyle = Style;
        //        }
        //    }
        //}
        DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
        dsi.Company = "測試公司";
        workbook.DocumentSummaryInformation = dsi;
        ////create a entry of SummaryInformation
        SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
        si.Subject = "測試公司Excel檔案";
        si.Title = "測試公司Excel檔案";
        si.Author = "killysss";
        si.Comments = "謝謝您的使用！";
        workbook.SummaryInformation = si;

    }</CODE></PRE></DIV> 
<P>Excel檔案資訊及相關應用</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:a17049d5-3cde-4ed5-8dd6-9fed92ac0094" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    public static string GetCellPosition(int row, int col)
    {
        col = Convert.ToInt32('A') + col;
        row = row + 1;
        return ((char)col) + row.ToString();
    }

    #endregion</CODE></PRE></DIV> 
<P>資料形態轉換</P>
<P></P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:35cc3d4f-71a0-4ee7-ac4d-ce3a27026f15" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    public static void WriteSteamToFile(MemoryStream ms, string FileName)
    {
        FileStream fs = new FileStream(FileName, FileMode.Create, FileAccess.Write);
        byte[] data = ms.ToArray();

        fs.Write(data, 0, data.Length);
        fs.Flush();
        fs.Close();

        data = null;
        ms = null;
        fs = null;
    }
    public static void WriteSteamToFile(byte[] data, string FileName)
    {
        FileStream fs = new FileStream(FileName, FileMode.Create, FileAccess.Write);        
        fs.Write(data, 0, data.Length);
        fs.Flush();
        fs.Close();
        data = null;        
        fs = null;
    }
    public static Stream WorkBookToStream(HSSFWorkbook InputWorkBook)
    {
        MemoryStream ms = new MemoryStream();
        InputWorkBook.Write(ms);
        ms.Flush();
        ms.Position = 0;
        return ms;
    }
    public static HSSFWorkbook StreamToWorkBook(Stream InputStream)
    {
        HSSFWorkbook WorkBook = new HSSFWorkbook(InputStream);
        return WorkBook;
    }
    public static HSSFWorkbook MemoryStreamToWorkBook(MemoryStream InputStream)
    {
        HSSFWorkbook WorkBook = new HSSFWorkbook(InputStream as Stream);
        return WorkBook;
    }
    public static MemoryStream WorkBookToMemoryStream(HSSFWorkbook InputStream)
    {
        //Write the stream data of workbook to the root directory
        MemoryStream file = new MemoryStream();
        InputStream.Write(file);
        return file;
    }
    public static Stream FileToStream(string FileName)
    {
        FileInfo fi = new FileInfo(FileName);
        if (fi.Exists == true) 
        {
            FileStream fs = new FileStream(FileName, FileMode.Open, FileAccess.Read);
            return fs;
        }
        else return null;        
    }
    public static Stream MemoryStreamToStream(MemoryStream ms)
    {
        return ms as Stream;
    }
    #endregion</CODE></PRE></DIV> 
<P>DataTable與Excel資料格式轉換</P>
<P></P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:93eb73eb-24d8-40b2-8f20-4459577f56c4" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 將DataTable轉成Stream輸出.
    /// &lt;/summary&gt;
    /// &lt;param name="SourceTable"&gt;The source table.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream RenderDataTableToExcel(DataTable SourceTable)
    {
        workbook = new HSSFWorkbook();
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        HSSFSheet sheet = workbook.CreateSheet();
        HSSFRow headerRow = sheet.CreateRow(0);

        // handling header.
        foreach (DataColumn column in SourceTable.Columns)
            headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);

        // handling value.
        int rowIndex = 1;

        foreach (DataRow row in SourceTable.Rows)
        {
            HSSFRow dataRow = sheet.CreateRow(rowIndex);

            foreach (DataColumn column in SourceTable.Columns)
            {
                dataRow.CreateCell(column.Ordinal).SetCellValue(row[column].ToString());
            }

            rowIndex++;
        }

        workbook.Write(ms);
        ms.Flush();
        ms.Position = 0;

        sheet = null;
        headerRow = null;
        workbook = null;

        return ms;
    }
    /// &lt;summary&gt;
    /// 將DataTable轉成Workbook(自定資料型態)輸出.
    /// &lt;/summary&gt;
    /// &lt;param name="SourceTable"&gt;The source table.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static HSSFWorkbook RenderDataTableToWorkBook(DataTable SourceTable)
    {
        workbook = new HSSFWorkbook();
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        HSSFSheet sheet = workbook.CreateSheet();
        HSSFRow headerRow = sheet.CreateRow(0);

        // handling header.
        foreach (DataColumn column in SourceTable.Columns)
            headerRow.CreateCell(column.Ordinal).SetCellValue(column.ColumnName);

        // handling value.
        int rowIndex = 1;

        foreach (DataRow row in SourceTable.Rows)
        {
            HSSFRow dataRow = sheet.CreateRow(rowIndex);

            foreach (DataColumn column in SourceTable.Columns)
            {
                dataRow.CreateCell(column.Ordinal).SetCellValue(row[column].ToString());
            }

            rowIndex++;
        }
        return workbook;
    }

    /// &lt;summary&gt;
    /// 將DataTable資料輸出成檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="SourceTable"&gt;The source table.&lt;/param&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    public static void RenderDataTableToExcel(DataTable SourceTable, string FileName)
    {
        MemoryStream ms = RenderDataTableToExcel(SourceTable) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }

    /// &lt;summary&gt;
    /// 從位元流讀取資料到DataTable.
    /// &lt;/summary&gt;
    /// &lt;param name="ExcelFileStream"&gt;The excel file stream.&lt;/param&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    /// &lt;param name="HeaderRowIndex"&gt;Index of the header row.&lt;/param&gt;
    /// &lt;param name="HaveHeader"&gt;if set to &lt;c&gt;true&lt;/c&gt; [have header].&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static DataTable RenderDataTableFromExcel(Stream ExcelFileStream, string SheetName, int HeaderRowIndex, bool HaveHeader)
    {
        workbook = new HSSFWorkbook(ExcelFileStream);
        InitializeWorkbook();
        HSSFSheet sheet = workbook.GetSheet(SheetName);

        DataTable table = new DataTable();

        HSSFRow headerRow = sheet.GetRow(HeaderRowIndex);
        int cellCount = headerRow.LastCellNum;

        for (int i = headerRow.FirstCellNum; i &lt; cellCount; i++)
        {
            string ColumnName = (HaveHeader == true) ? headerRow.GetCell(i).StringCellValue : "f" + i.ToString();
            DataColumn column = new DataColumn(ColumnName);
            table.Columns.Add(column);
        }

        int rowCount = sheet.LastRowNum;
        int RowStart = (HaveHeader == true) ? sheet.FirstRowNum + 1 : sheet.FirstRowNum;
        for (int i = RowStart; i &lt;= sheet.LastRowNum; i++)
        {
            HSSFRow row = sheet.GetRow(i);
            DataRow dataRow = table.NewRow();

            for (int j = row.FirstCellNum; j &lt; cellCount; j++)
                dataRow[j] = row.GetCell(j).ToString();
        }

        ExcelFileStream.Close();
        workbook = null;
        sheet = null;
        return table;
    }

    /// &lt;summary&gt;
    /// 從位元流讀取資料到DataTable.
    /// &lt;/summary&gt;
    /// &lt;param name="ExcelFileStream"&gt;The excel file stream.&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;param name="HeaderRowIndex"&gt;Index of the header row.&lt;/param&gt;
    /// &lt;param name="HaveHeader"&gt;if set to &lt;c&gt;true&lt;/c&gt; [have header].&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static DataTable RenderDataTableFromExcel(Stream ExcelFileStream, int SheetIndex, int HeaderRowIndex, bool HaveHeader)
    {
        workbook = new HSSFWorkbook(ExcelFileStream);
        InitializeWorkbook();
        HSSFSheet sheet = workbook.GetSheetAt(SheetIndex);

        DataTable table = new DataTable();

        HSSFRow headerRow = sheet.GetRow(HeaderRowIndex);
        int cellCount = headerRow.LastCellNum;

        for (int i = headerRow.FirstCellNum; i &lt; cellCount; i++)
        {
            string ColumnName = (HaveHeader == true) ? headerRow.GetCell(i).StringCellValue : "f" + i.ToString();
            DataColumn column = new DataColumn(ColumnName);
            table.Columns.Add(column);
        }

        int rowCount = sheet.LastRowNum;
        int RowStart = (HaveHeader == true) ? sheet.FirstRowNum + 1 : sheet.FirstRowNum;
        for (int i = RowStart; i &lt;= sheet.LastRowNum; i++)
        {
            HSSFRow row = sheet.GetRow(i);
            DataRow dataRow = table.NewRow();

            for (int j = row.FirstCellNum; j &lt; cellCount; j++)
            {
                if (row.GetCell(j) != null)
                    dataRow[j] = row.GetCell(j).ToString();
            }

            table.Rows.Add(dataRow);
        }

        ExcelFileStream.Close();
        workbook = null;
        sheet = null;
        return table;
    }
    #endregion</CODE></PRE></DIV> 
<P>字串陣列與Excel資料格式轉換</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:9b26c61a-ad1b-4a02-812f-512f98740648" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 建立datatable
    /// &lt;/summary&gt;
    /// &lt;param name="ColumnName"&gt;欄位名用逗號分隔&lt;/param&gt;
    /// &lt;param name="value"&gt;data陣列 , rowmajor&lt;/param&gt;
    /// &lt;returns&gt;DataTable&lt;/returns&gt;
    public static DataTable CreateDataTable(string ColumnName, string[,] value)
    {
        /*  輸入範例
        string cname = " name , sex ";
        string[,] aaz = new string[4, 2];
        for (int q = 0; q &lt; 4; q++)
            for (int r = 0; r &lt; 2; r++)
                aaz[q, r] = "1";
        dataGridView1.DataSource = NewMediaTest1.Model.Utility.DataSetUtil.CreateDataTable(cname, aaz);
        */
        int i, j;
        DataTable ResultTable = new DataTable();
        string[] sep = new string[] { "," };

        string[] TempColName = ColumnName.Split(sep, StringSplitOptions.RemoveEmptyEntries);
        DataColumn[] CName = new DataColumn[TempColName.Length];
        for (i = 0; i &lt; TempColName.Length; i++)
        {
            DataColumn c1 = new DataColumn(TempColName[i].ToString().Trim(), typeof(object));
            ResultTable.Columns.Add(c1);
        }
        if (value != null)
        {
            for (i = 0; i &lt; value.GetLength(0); i++)
            {
                DataRow newrow = ResultTable.NewRow();
                for (j = 0; j &lt; TempColName.Length; j++)
                {
                    newrow[j] = string.Copy(value[i, j].ToString());

                }
                ResultTable.Rows.Add(newrow);
            }
        }
        return ResultTable;
    }
    /// &lt;summary&gt;
    /// Creates the string array.
    /// &lt;/summary&gt;
    /// &lt;param name="dt"&gt;The dt.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static string[,] CreateStringArray(DataTable dt)
    {
        int ColumnNum = dt.Columns.Count;
        int RowNum = dt.Rows.Count;
        string[,] result = new string[RowNum, ColumnNum];
        for (int i = 0; i &lt; dt.Rows.Count; i++)
        {
            for (int j = 0; j &lt; dt.Columns.Count; j++)
            {
                result[i, j] = string.Copy(dt.Rows[i][j].ToString());
            }
        }
        return result;
    }
    /// &lt;summary&gt;
    /// 將陣列輸出成位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="ColumnName"&gt;Name of the column.&lt;/param&gt;
    /// &lt;param name="SourceTable"&gt;The source table.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream RenderArrayToExcel(string ColumnName, string[,] SourceTable)
    {
        DataTable dt = CreateDataTable(ColumnName, SourceTable);
        return RenderDataTableToExcel(dt);
    }
    /// &lt;summary&gt;
    /// 將陣列輸出成檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="ColumnName"&gt;Name of the column.&lt;/param&gt;
    /// &lt;param name="SourceTable"&gt;The source table.&lt;/param&gt;
    public static void RenderArrayToExcel(string FileName, string ColumnName, string[,] SourceTable)
    {
        DataTable dt = CreateDataTable(ColumnName, SourceTable);
        RenderDataTableToExcel(dt, FileName);
    }
    /// &lt;summary&gt;
    /// 將陣列輸出成WorkBook(自訂資料型態).
    /// &lt;/summary&gt;
    /// &lt;param name="ColumnName"&gt;Name of the column.&lt;/param&gt;
    /// &lt;param name="SourceTable"&gt;The source table.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static HSSFWorkbook RenderArrayToWorkBook(string ColumnName, string[,] SourceTable)
    {
        DataTable dt = CreateDataTable(ColumnName, SourceTable);
        return RenderDataTableToWorkBook(dt);
    }

    /// &lt;summary&gt;
    /// 將位元流資料輸出成陣列.
    /// &lt;/summary&gt;
    /// &lt;param name="ExcelFileStream"&gt;The excel file stream.&lt;/param&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    /// &lt;param name="HeaderRowIndex"&gt;Index of the header row.&lt;/param&gt;
    /// &lt;param name="HaveHeader"&gt;if set to &lt;c&gt;true&lt;/c&gt; [have header].&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static string[,] RenderArrayFromExcel(Stream ExcelFileStream, string SheetName, int HeaderRowIndex, bool HaveHeader)
    {
        workbook = new HSSFWorkbook(ExcelFileStream);
        InitializeWorkbook();
        HSSFSheet sheet = workbook.GetSheet(SheetName);

        DataTable table = new DataTable();

        HSSFRow headerRow = sheet.GetRow(HeaderRowIndex);
        int cellCount = headerRow.LastCellNum;

        for (int i = headerRow.FirstCellNum; i &lt; cellCount; i++)
        {
            DataColumn column = new DataColumn(headerRow.GetCell(i).StringCellValue);
            table.Columns.Add(column);
        }

        int rowCount = sheet.LastRowNum;
        int RowStart = (HaveHeader == true) ? sheet.FirstRowNum + 1 : sheet.FirstRowNum;
        for (int i = RowStart; i &lt;= sheet.LastRowNum; i++)
        {
            HSSFRow row = sheet.GetRow(i);
            DataRow dataRow = table.NewRow();

            for (int j = row.FirstCellNum; j &lt; cellCount; j++)
                dataRow[j] = row.GetCell(j).ToString();
        }

        ExcelFileStream.Close();
        workbook = null;
        sheet = null;
        return CreateStringArray(table);
    }

    /// &lt;summary&gt;
    /// 將位元流資料輸出成陣列.
    /// &lt;/summary&gt;
    /// &lt;param name="ExcelFileStream"&gt;The excel file stream.&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;param name="HeaderRowIndex"&gt;Index of the header row.&lt;/param&gt;
    /// &lt;param name="HaveHeader"&gt;if set to &lt;c&gt;true&lt;/c&gt; [have header].&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static string[,] RenderArrayFromExcel(Stream ExcelFileStream, int SheetIndex, int HeaderRowIndex, bool HaveHeader)
    {
        workbook = new HSSFWorkbook(ExcelFileStream);
        InitializeWorkbook();
        HSSFSheet sheet = workbook.GetSheetAt(SheetIndex);

        DataTable table = new DataTable();

        HSSFRow headerRow = sheet.GetRow(HeaderRowIndex);
        int cellCount = headerRow.LastCellNum;

        for (int i = headerRow.FirstCellNum; i &lt; cellCount; i++)
        {
            DataColumn column = new DataColumn(headerRow.GetCell(i).StringCellValue);
            table.Columns.Add(column);
        }

        int rowCount = sheet.LastRowNum;
        int RowStart = (HaveHeader == true) ? sheet.FirstRowNum + 1 : sheet.FirstRowNum;
        for (int i = RowStart; i &lt;= sheet.LastRowNum; i++)
        {
            HSSFRow row = sheet.GetRow(i);
            DataRow dataRow = table.NewRow();

            for (int j = row.FirstCellNum; j &lt; cellCount; j++)
            {
                if (row.GetCell(j) != null)
                    dataRow[j] = row.GetCell(j).ToString();
            }

            table.Rows.Add(dataRow);
        }

        ExcelFileStream.Close();
        workbook = null;
        sheet = null;
        return CreateStringArray(table);
    }
    #endregion</CODE></PRE></DIV> 
<P>
<P>
<P>超連結</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:da3d7211-4459-475a-92f2-63f6f0ca7611" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 在位元流儲存格中建立超連結.
    /// &lt;/summary&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="SheetNameOrIndex"&gt;Index of the sheet name or.&lt;/param&gt;
    /// &lt;param name="LinkName"&gt;Name of the link.&lt;/param&gt;
    /// &lt;param name="LinkValueOrIndex"&gt;Index of the link value or.&lt;/param&gt;
    /// &lt;param name="s1"&gt;The s1.&lt;/param&gt;
    /// &lt;param name="RowIndex"&gt;Index of the row.&lt;/param&gt;
    /// &lt;param name="CellIndex"&gt;Index of the cell.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream MakeLink(Stream InputStream, string SheetNameOrIndex, string LinkName, string LinkValueOrIndex, LinkType s1, int RowIndex, int CellIndex)
    {

        workbook = new HSSFWorkbook(InputStream);
        //HSSFSheet sheet = hssfworkbook.CreateSheet("Hyperlinks");
        ////cell style for hyperlinks
        ////by default hyperlinks are blue and underlined        
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        HSSFCellStyle hlink_style = workbook.CreateCellStyle();
        HSSFFont hlink_font = workbook.CreateFont();
        hlink_font.Underline = HSSFFont.U_SINGLE;
        hlink_font.Color = HSSFColor.BLUE.index;
        hlink_style.SetFont(hlink_font);
        string ResultLinkValue = string.Empty;
        int ResultSheet;
        HSSFSheet sheet;
        if (int.TryParse(SheetNameOrIndex, out ResultSheet) == true)
            sheet = workbook.GetSheetAt(ResultSheet);
        else
            sheet = workbook.GetSheet(SheetNameOrIndex);
        HSSFCell cell = sheet.CreateRow(RowIndex).CreateCell(CellIndex);
        cell.SetCellValue(LinkName);
        HSSFHyperlink link;
        switch (s1.ToString())
        {
            case "網址": link = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
                ResultLinkValue = string.Copy(LinkValueOrIndex);
                break;
            case "檔案": link = new HSSFHyperlink(HSSFHyperlink.LINK_FILE);
                ResultLinkValue = string.Copy(LinkValueOrIndex);
                break;
            case "郵件": link = new HSSFHyperlink(HSSFHyperlink.LINK_EMAIL);
                // ResultLinkValue = string.Copy(LinkValue);   
                ResultLinkValue = "mailto:" + LinkValueOrIndex;
                break;
            case "內文":
                int result;
                link = new HSSFHyperlink(HSSFHyperlink.LINK_DOCUMENT);
                if (int.TryParse(LinkValueOrIndex, out result) == true)
                    ResultLinkValue = "'" + workbook.GetSheetName(result) + "'!A1";
                else
                    ResultLinkValue = "'" + LinkValueOrIndex + "'!A1";
                break;
            default: link = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
                break;
        }
        link.Address = (ResultLinkValue);
        cell.Hyperlink = (link);
        cell.CellStyle = (hlink_style);
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 在檔案儲存格中建立超連結.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="SheetNameOrIndex"&gt;Index of the sheet name or.&lt;/param&gt;
    /// &lt;param name="LinkName"&gt;Name of the link.&lt;/param&gt;
    /// &lt;param name="LinkValueOrIndex"&gt;Index of the link value or.&lt;/param&gt;
    /// &lt;param name="s1"&gt;The s1.&lt;/param&gt;
    /// &lt;param name="RowIndex"&gt;Index of the row.&lt;/param&gt;
    /// &lt;param name="CellIndex"&gt;Index of the cell.&lt;/param&gt;
    public static void MakeLink(string FileName, Stream InputStream, string SheetNameOrIndex, string LinkName, string LinkValueOrIndex, LinkType s1, int RowIndex, int CellIndex)
    {
        MemoryStream ms = MakeLink(InputStream, SheetNameOrIndex, LinkName, LinkValueOrIndex, s1, RowIndex, CellIndex) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    /// &lt;summary&gt;
    /// 建立新位元流並在儲存格中建立超連結.
    /// &lt;/summary&gt;
    /// &lt;param name="SheetNameOrIndex"&gt;Index of the sheet name or.&lt;/param&gt;
    /// &lt;param name="LinkName"&gt;Name of the link.&lt;/param&gt;
    /// &lt;param name="LinkValueOrIndex"&gt;Index of the link value or.&lt;/param&gt;
    /// &lt;param name="s1"&gt;The s1.&lt;/param&gt;
    /// &lt;param name="RowIndex"&gt;Index of the row.&lt;/param&gt;
    /// &lt;param name="CellIndex"&gt;Index of the cell.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream MakeLinkFromEmpty(string SheetNameOrIndex, string LinkName, string LinkValueOrIndex, LinkType s1, int RowIndex, int CellIndex)
    {

        workbook = new HSSFWorkbook();
        HSSFSheet sheet1 = workbook.CreateSheet();
        //HSSFSheet sheet = hssfworkbook.CreateSheet("Hyperlinks");
        ////cell style for hyperlinks
        ////by default hyperlinks are blue and underlined        
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        HSSFCellStyle hlink_style = workbook.CreateCellStyle();
        HSSFFont hlink_font = workbook.CreateFont();
        hlink_font.Underline = HSSFFont.U_SINGLE;
        hlink_font.Color = HSSFColor.BLUE.index;
        hlink_style.SetFont(hlink_font);
        string ResultLinkValue = string.Empty;
        int ResultSheet;
        HSSFSheet sheet;
        if (int.TryParse(SheetNameOrIndex, out ResultSheet) == true)
            sheet = workbook.GetSheetAt(ResultSheet);
        else
            sheet = workbook.GetSheet(SheetNameOrIndex);
        HSSFCell cell = sheet.CreateRow(RowIndex).CreateCell(CellIndex);
        cell.SetCellValue(LinkName);
        HSSFHyperlink link;
        switch (s1.ToString())
        {
            case "網址": link = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
                ResultLinkValue = string.Copy(LinkValueOrIndex);
                break;
            case "檔案": link = new HSSFHyperlink(HSSFHyperlink.LINK_FILE);
                ResultLinkValue = string.Copy(LinkValueOrIndex);
                break;
            case "郵件": link = new HSSFHyperlink(HSSFHyperlink.LINK_EMAIL);
                // ResultLinkValue = string.Copy(LinkValue);   
                ResultLinkValue = "mailto:" + LinkValueOrIndex;
                break;
            case "內文":
                int result;
                link = new HSSFHyperlink(HSSFHyperlink.LINK_DOCUMENT);
                if (int.TryParse(LinkValueOrIndex, out result) == true)
                    ResultLinkValue = "'" + workbook.GetSheetName(result) + "'!A1";
                else
                    ResultLinkValue = "'" + LinkValueOrIndex + "'!A1";
                break;
            default: link = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
                break;
        }
        link.Address = (ResultLinkValue);
        cell.Hyperlink = (link);
        cell.CellStyle = (hlink_style);
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 建立新檔案並在儲存格中建立超連結.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="SheetNameOrIndex"&gt;Index of the sheet name or.&lt;/param&gt;
    /// &lt;param name="LinkName"&gt;Name of the link.&lt;/param&gt;
    /// &lt;param name="LinkValueOrIndex"&gt;Index of the link value or.&lt;/param&gt;
    /// &lt;param name="s1"&gt;The s1.&lt;/param&gt;
    /// &lt;param name="RowIndex"&gt;Index of the row.&lt;/param&gt;
    /// &lt;param name="CellIndex"&gt;Index of the cell.&lt;/param&gt;
    public static void MakeLinkFromEmpty(string FileName, string SheetNameOrIndex, string LinkName, string LinkValueOrIndex, LinkType s1, int RowIndex, int CellIndex)
    {
        MemoryStream ms = MakeLinkFromEmpty(SheetNameOrIndex, LinkName, LinkValueOrIndex, s1, RowIndex, CellIndex) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    #endregion</CODE></PRE></DIV> 
<P>設定字體字形</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:58137b9a-dcf9-45b3-8cd9-3e49e25511d4" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    public static HSSFCellStyle SetCellStyle(HSSFFont InputFont)
    {
        InitializeWorkbook();
        HSSFCellStyle style1 = workbook.CreateCellStyle();
        style1.SetFont(InputFont);
        return style1;
    }
    /// &lt;summary&gt;
    /// 設定字體顏色大小到位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="FontName"&gt;Name of the font.&lt;/param&gt;
    /// &lt;param name="FontSize"&gt;Size of the font.&lt;/param&gt;
    /// &lt;param name="IsAllSheet"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is all sheet].&lt;/param&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream ApplyStyleToFile(Stream InputStream, string FontName, short FontSize, bool IsAllSheet, params string[] SheetName)
    {
        workbook = new HSSFWorkbook(InputStream);
        InitializeWorkbook();
        HSSFFont font = workbook.CreateFont();
        HSSFCellStyle Style = workbook.CreateCellStyle();
        font.FontHeightInPoints = FontSize;
        font.FontName = FontName;
        Style.SetFont(font);
        MemoryStream ms = new MemoryStream();
        int i;
        if (IsAllSheet == true)
        {
            for (i = 0; i &lt; workbook.NumberOfSheets; i++)
            {
                HSSFSheet Sheets = workbook.GetSheetAt(0);
                for (int k = Sheets.FirstRowNum; k &lt;= Sheets.LastRowNum; k++)
                {
                    HSSFRow row = Sheets.GetRow(k);
                    for (int l = row.FirstCellNum; l &lt; row.LastCellNum; l++)
                    {
                        HSSFCell Cell = row.GetCell(l);
                        Cell.CellStyle = Style;
                    }
                }
            }
        }
        else
        {
            for (i = 0; i &lt; SheetName.Length; i++)
            {
                HSSFSheet Sheets = workbook.GetSheet(SheetName[i]);
                for (int k = Sheets.FirstRowNum; k &lt;= Sheets.LastRowNum; k++)
                {
                    HSSFRow row = Sheets.GetRow(k);
                    for (int l = row.FirstCellNum; l &lt; row.LastCellNum; l++)
                    {
                        HSSFCell Cell = row.GetCell(l);
                        Cell.CellStyle = Style;
                    }
                }
            }
        }
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 設定字體顏色大小到位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="FontName"&gt;Name of the font.&lt;/param&gt;
    /// &lt;param name="FontSize"&gt;Size of the font.&lt;/param&gt;
    /// &lt;param name="IsAllSheet"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is all sheet].&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream ApplyStyleToFile(Stream InputStream, string FontName, short FontSize, bool IsAllSheet, params int[] SheetIndex)
    {
        workbook = new HSSFWorkbook(InputStream);
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        HSSFFont font = workbook.CreateFont();
        HSSFCellStyle Style = workbook.CreateCellStyle();
        font.FontHeightInPoints = FontSize;
        font.FontName = FontName;
        Style.SetFont(font);
        int i;
        if (IsAllSheet == true)
        {
            for (i = 0; i &lt; workbook.NumberOfSheets; i++)
            {
                HSSFSheet Sheets = workbook.GetSheetAt(0);
                for (int k = Sheets.FirstRowNum; k &lt;= Sheets.LastRowNum; k++)
                {
                    HSSFRow row = Sheets.GetRow(k);
                    for (int l = row.FirstCellNum; l &lt; row.LastCellNum; l++)
                    {
                        HSSFCell Cell = row.GetCell(l);
                        Cell.CellStyle = Style;
                    }
                }
            }
        }
        else
        {
            for (i = 0; i &lt; SheetIndex.Length; i++)
            {
                HSSFSheet Sheets = workbook.GetSheetAt(SheetIndex[i]);
                for (int k = Sheets.FirstRowNum; k &lt;= Sheets.LastRowNum; k++)
                {
                    HSSFRow row = Sheets.GetRow(k);
                    for (int l = row.FirstCellNum; l &lt; row.LastCellNum; l++)
                    {
                        HSSFCell Cell = row.GetCell(l);
                        Cell.CellStyle = Style;
                    }
                }
            }
        }
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 設定字體顏色大小到檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="FontName"&gt;Name of the font.&lt;/param&gt;
    /// &lt;param name="FontSize"&gt;Size of the font.&lt;/param&gt;
    /// &lt;param name="IsAllSheet"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is all sheet].&lt;/param&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    public static void ApplyStyleToFile(string FileName, Stream InputStream, string FontName, short FontSize, bool IsAllSheet, params string[] SheetName)
    {
        MemoryStream ms = ApplyStyleToFile(InputStream, FontName, FontSize, IsAllSheet, SheetName) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    /// &lt;summary&gt;
    /// 設定字體顏色大小到檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="FontName"&gt;Name of the font.&lt;/param&gt;
    /// &lt;param name="FontSize"&gt;Size of the font.&lt;/param&gt;
    /// &lt;param name="IsAllSheet"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is all sheet].&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    public static void ApplyStyleToFile(string FileName, Stream InputStream, string FontName, short FontSize, bool IsAllSheet, params int[] SheetIndex)
    {
        MemoryStream ms = ApplyStyleToFile(InputStream, FontName, FontSize, IsAllSheet, SheetIndex) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    #endregion</CODE></PRE></DIV> 
<P>建立空白excel檔</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:7f3b9828-3d45-4b07-bb4d-44d6a88ad5c1" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 建立空白excel檔到位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream CreateEmptyFile(params string[] SheetName)
    {
        MemoryStream ms = new MemoryStream();
        workbook = new HSSFWorkbook();
        InitializeWorkbook();
        if (SheetName == null)
        {
            workbook.CreateSheet();
        }
        else
        {
            foreach (string temp in SheetName)
                workbook.CreateSheet(temp);
        }
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 建立空白excel檔到檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    public static void CreateEmptyFile(string FileName, params string[] SheetName)
    {
        MemoryStream ms = CreateEmptyFile(SheetName) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    #endregion</CODE></PRE></DIV> 
<P>設定格線</P>
<P></P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:eed2b00a-b695-45b5-a492-a1ce05d90311" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 設定格線到位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="InputSteam"&gt;The input steam.&lt;/param&gt;
    /// &lt;param name="haveGridLine"&gt;if set to &lt;c&gt;true&lt;/c&gt; [have grid line].&lt;/param&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream SetGridLine(Stream InputSteam, bool haveGridLine, params string[] SheetName)
    {
        workbook = new HSSFWorkbook(InputSteam);
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        if (SheetName == null)
        {
            for (int i = 0; i &lt; workbook.NumberOfSheets; i++)
            {
                HSSFSheet s1 = workbook.GetSheetAt(i);
                s1.DisplayGridlines = haveGridLine;
            }
        }
        else
        {
            foreach (string TempSheet in SheetName)
            {
                HSSFSheet s1 = workbook.GetSheet(TempSheet);
                s1.DisplayGridlines = haveGridLine;
            }
        }
        workbook.Write(ms);
        ms.Flush();
        return ms; 
    }
    /// &lt;summary&gt;
    /// 設定格線到位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="InputSteam"&gt;The input steam.&lt;/param&gt;
    /// &lt;param name="haveGridLine"&gt;if set to &lt;c&gt;true&lt;/c&gt; [have grid line].&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream SetGridLine(Stream InputSteam, bool haveGridLine, params int[] SheetIndex)
    {
        workbook = new HSSFWorkbook(InputSteam);
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        if (SheetIndex == null)
        {
            for (int i = 0; i &lt; workbook.NumberOfSheets; i++)
            {
                HSSFSheet s1 = workbook.GetSheetAt(i);
                s1.DisplayGridlines = haveGridLine;
            }
        }
        else
        {
            foreach (int TempSheet in SheetIndex)
            {
                HSSFSheet s1 = workbook.GetSheetAt(TempSheet);
                s1.DisplayGridlines = haveGridLine;
            }
        }
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 設定格線到檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="InputSteam"&gt;The input steam.&lt;/param&gt;
    /// &lt;param name="haveGridLine"&gt;if set to &lt;c&gt;true&lt;/c&gt; [have grid line].&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    public static void SetGridLine(string FileName, Stream InputSteam, bool haveGridLine, params int[] SheetIndex)
    {
        MemoryStream ms = SetGridLine(InputSteam, haveGridLine, SheetIndex) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    /// &lt;summary&gt;
    /// 設定格線到檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="InputSteam"&gt;The input steam.&lt;/param&gt;
    /// &lt;param name="haveGridLine"&gt;if set to &lt;c&gt;true&lt;/c&gt; [have grid line].&lt;/param&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    public static void SetGridLine(string FileName, Stream InputSteam, bool haveGridLine, params string[] SheetName)
    {
        MemoryStream ms = SetGridLine(InputSteam, haveGridLine, SheetName) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    #endregion</CODE></PRE></DIV> 
<P>擷取字串從excel檔案</P>
<P></P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:ab2689dc-2bbd-4910-8389-ec27b8fbf2d5" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 從位元流將資料轉成字串輸出
    /// &lt;/summary&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static string ExtractStringFromFileStream(Stream InputStream)
    {
        HSSFWorkbook HBook = new HSSFWorkbook(InputStream);
        ExcelExtractor extractor = new ExcelExtractor(HBook);
        return extractor.Text;
    }
    /// &lt;summary&gt;
    /// 從檔案將資料轉成字串輸出
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static string ExtractStringFromFileStream(string FileName)
    {
        FileInfo fi = new FileInfo(FileName);
        if (fi.Exists == true)
        {
            using (FileStream fs = fi.Open(FileMode.Open))
            {
                HSSFWorkbook HBook = new HSSFWorkbook(fs);
                ExcelExtractor extractor = new ExcelExtractor(HBook);
                return extractor.Text;
            }
        }
        else return null;
    }
    #endregion</CODE></PRE></DIV> 
<P>設定群組</P>
<P></P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:96fc5ad2-0ce6-4d0d-9780-9424e6c5d8fc" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 設定群組到位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    /// &lt;param name="IsRow"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is row].&lt;/param&gt;
    /// &lt;param name="From"&gt;From.&lt;/param&gt;
    /// &lt;param name="End"&gt;The end.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream CreateGroup(string SheetName, bool IsRow, int From, int End)
    {
        MemoryStream ms = new MemoryStream();
        workbook = new HSSFWorkbook();
        InitializeWorkbook();
        HSSFSheet sh = workbook.CreateSheet(SheetName);
        for (int i = 0; i &lt;= End; i++)
        {
            sh.CreateRow(i);
        }
        if (IsRow == true)
            sh.GroupRow(From, End);
        else
            sh.GroupColumn((short)From, (short)End);
        
        workbook.Write(ms);
        ms.Flush();
        return ms;
        
    }
    /// &lt;summary&gt;
    /// 建立群組到檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="SheetName"&gt;Name of the sheet.&lt;/param&gt;
    /// &lt;param name="IsRow"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is row].&lt;/param&gt;
    /// &lt;param name="From"&gt;From.&lt;/param&gt;
    /// &lt;param name="End"&gt;The end.&lt;/param&gt;
    public static void CreateGroup(string FileName,string SheetName, bool IsRow, int From, int End)
    {
        MemoryStream ms = CreateGroup(SheetName, IsRow, From, End) as MemoryStream;
        WriteSteamToFile(ms, FileName);        
    }
    #endregion</CODE></PRE></DIV> 
<P>從樣板建立檔案</P>
<P></P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:9e8b31b0-1af9-4063-a454-02a085750bbf" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 從樣板建立位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="TemplateFileName"&gt;Name of the template file.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream CreateFileStreamFromTemplate(string TemplateFileName)
    {
        FileInfo fi = new FileInfo(TemplateFileName);
        if (fi.Exists == true)
        {
            MemoryStream ms = new MemoryStream();
            FileStream file = new FileStream(TemplateFileName, FileMode.Open, FileAccess.Read);
            workbook = new HSSFWorkbook(file);
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "測試公司";
            workbook.DocumentSummaryInformation = dsi;
            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "測試公司Excel檔案";
            si.Title = "測試公司Excel檔案";
            si.Author = "killysss";
            si.Comments = "謝謝您的使用！";
            workbook.SummaryInformation = si;
            workbook.Write(ms);
            ms.Flush();
            return ms;
        }
        else return null;
    }

    /// &lt;summary&gt;
    /// 從樣板建立檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="TemplateFileName"&gt;Name of the template file.&lt;/param&gt;
    /// &lt;param name="OutputFileName"&gt;Name of the output file.&lt;/param&gt;
    public static void CreateFileFromTemplate(string TemplateFileName,string OutputFileName)
    {
        FileInfo fi = new FileInfo(TemplateFileName);
        if (fi.Exists == true)
        {
            MemoryStream ms = CreateFileStreamFromTemplate(TemplateFileName) as MemoryStream;
            WriteSteamToFile(ms, OutputFileName);
        }
        else ;
    }
    #endregion</CODE></PRE></DIV> 
<P>嵌入圖片</P>
<P></P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:7b3aed28-f66e-4e45-ab2c-6b74758907c1" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// Loads the image.
    /// &lt;/summary&gt;
    /// &lt;param name="path"&gt;The path.&lt;/param&gt;
    /// &lt;param name="wb"&gt;The wb.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static int LoadImage(string path, HSSFWorkbook wb)
    {
        FileStream file = new FileStream(path, FileMode.Open, FileAccess.Read);
        byte[] buffer = new byte[file.Length];
        file.Read(buffer, 0, (int)file.Length);
        return wb.AddPicture(buffer, HSSFWorkbook.PICTURE_TYPE_JPEG);

    }
    /// &lt;summary&gt;
    /// 嵌入圖片到位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;param name="PicFileName"&gt;Name of the pic file.&lt;/param&gt;
    /// &lt;param name="IsOriginalSize"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is original size].&lt;/param&gt;
    /// &lt;param name="RowPosition"&gt;The row position.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream EmbedImage(Stream InputStream,int SheetIndex,string PicFileName, bool IsOriginalSize , int[] RowPosition)
    {
        workbook = new HSSFWorkbook(InputStream);
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        HSSFSheet sheet1 = workbook.GetSheetAt(SheetIndex);
        HSSFPatriarch patriarch = sheet1.CreateDrawingPatriarch();
        //create the anchor
        HSSFClientAnchor anchor;
        anchor = new HSSFClientAnchor(0,0,0,0,
            RowPosition[0], RowPosition[1], RowPosition[2], RowPosition[3]);
        anchor.AnchorType = 2;
        //load the picture and get the picture index in the workbook
        HSSFPicture picture = patriarch.CreatePicture(anchor, LoadImage(PicFileName, workbook));
        //Reset the image to the original size.
        if(IsOriginalSize== true)
            picture.Resize();
        //Line Style
        picture.LineStyle = HSSFPicture.LINESTYLE_NONE;
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 嵌入圖片到檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="PicFileName"&gt;Name of the pic file.&lt;/param&gt;
    /// &lt;param name="IsOriginalSize"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is original size].&lt;/param&gt;
    /// &lt;param name="RowPosition"&gt;The row position.&lt;/param&gt;
    public static void EmbedImage(string FileName, int SheetIndex, Stream InputStream, string PicFileName, bool IsOriginalSize, int[] RowPosition)
    {
        MemoryStream ms = EmbedImage(InputStream, SheetIndex, PicFileName, IsOriginalSize, RowPosition) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    /// &lt;summary&gt;
    /// 建立新位元流並嵌入圖片.
    /// &lt;/summary&gt;
    /// &lt;param name="PicFileName"&gt;Name of the pic file.&lt;/param&gt;
    /// &lt;param name="IsOriginalSize"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is original size].&lt;/param&gt;
    /// &lt;param name="RowPosition"&gt;The row position.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream EmbedImage(string PicFileName, bool IsOriginalSize, int[] RowPosition)
    {
        workbook = new HSSFWorkbook();
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        HSSFSheet sheet1 = workbook.CreateSheet();
        HSSFPatriarch patriarch = sheet1.CreateDrawingPatriarch();
        //create the anchor
        HSSFClientAnchor anchor;
        anchor = new HSSFClientAnchor(0, 0, 0, 0,
            RowPosition[0], RowPosition[1], RowPosition[2], RowPosition[3]);
        anchor.AnchorType = 2;
        //load the picture and get the picture index in the workbook
        HSSFPicture picture = patriarch.CreatePicture(anchor, LoadImage(PicFileName, workbook));
        //Reset the image to the original size.
        if (IsOriginalSize == true)
            picture.Resize();
        //Line Style
        picture.LineStyle = HSSFPicture.LINESTYLE_NONE;
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 建立新檔案並嵌入圖片.
    /// &lt;/summary&gt;
    /// &lt;param name="ExcelFileName"&gt;Name of the excel file.&lt;/param&gt;
    /// &lt;param name="PicFileName"&gt;Name of the pic file.&lt;/param&gt;
    /// &lt;param name="IsOriginalSize"&gt;if set to &lt;c&gt;true&lt;/c&gt; [is original size].&lt;/param&gt;
    /// &lt;param name="RowPosition"&gt;The row position.&lt;/param&gt;
    public static void EmbedImage(string ExcelFileName, string PicFileName, bool IsOriginalSize, int[] RowPosition)
    {
        MemoryStream ms = EmbedImage(PicFileName, IsOriginalSize, RowPosition) as MemoryStream;
        WriteSteamToFile(ms, ExcelFileName);
    }
    #endregion</CODE></PRE></DIV> 
<P>合併儲存格</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:31e35f1e-5b72-4fd0-93b8-65f2bf34c030" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 合併儲存格於位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;param name="RowFrom"&gt;The row from.&lt;/param&gt;
    /// &lt;param name="ColumnFrom"&gt;The column from.&lt;/param&gt;
    /// &lt;param name="RowTo"&gt;The row to.&lt;/param&gt;
    /// &lt;param name="ColumnTo"&gt;The column to.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream MergeCell(Stream InputStream, int SheetIndex, int RowFrom, int ColumnFrom, int RowTo, int ColumnTo)
    {
        workbook = new HSSFWorkbook(InputStream);
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        InitializeWorkbook();        
        HSSFSheet sheet1 = workbook.GetSheetAt(SheetIndex);
        sheet1.AddMergedRegion(new Region(RowFrom, ColumnFrom, RowTo, ColumnTo));
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 合併儲存格於檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;param name="RowFrom"&gt;The row from.&lt;/param&gt;
    /// &lt;param name="ColumnFrom"&gt;The column from.&lt;/param&gt;
    /// &lt;param name="RowTo"&gt;The row to.&lt;/param&gt;
    /// &lt;param name="ColumnTo"&gt;The column to.&lt;/param&gt;
    public static void MergeCell(string FileName, Stream InputStream, int SheetIndex, int RowFrom, int ColumnFrom, int RowTo, int ColumnTo)
    {
        MemoryStream ms = MergeCell(InputStream, SheetIndex, RowFrom, ColumnFrom, RowTo, ColumnTo) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    /// &lt;summary&gt;
    /// 建立新位元流並合併儲存格.
    /// &lt;/summary&gt;
    /// &lt;param name="RowFrom"&gt;The row from.&lt;/param&gt;
    /// &lt;param name="ColumnFrom"&gt;The column from.&lt;/param&gt;
    /// &lt;param name="RowTo"&gt;The row to.&lt;/param&gt;
    /// &lt;param name="ColumnTo"&gt;The column to.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream MergeCell(int RowFrom, int ColumnFrom, int RowTo, int ColumnTo)
    {
        workbook = new HSSFWorkbook();
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        InitializeWorkbook();
        HSSFSheet sheet1 = workbook.CreateSheet();
        sheet1.AddMergedRegion(new Region(RowFrom, ColumnFrom, RowTo, ColumnTo));
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 建立新檔案並合併儲存格.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="RowFrom"&gt;The row from.&lt;/param&gt;
    /// &lt;param name="ColumnFrom"&gt;The column from.&lt;/param&gt;
    /// &lt;param name="RowTo"&gt;The row to.&lt;/param&gt;
    /// &lt;param name="ColumnTo"&gt;The column to.&lt;/param&gt;
    public static void MergeCell(string FileName , int RowFrom, int ColumnFrom, int RowTo, int ColumnTo)
    {
        MemoryStream ms = MergeCell( RowFrom, ColumnFrom, RowTo, ColumnTo) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    #endregion</CODE></PRE></DIV> 
<P>
<P>
<P>
<P>
<P>
<P>設定儲存格公式</P>
<DIV class="wlWriterEditableSmartContent" id="scid:812469c5-0cb0-4c63-8c15-c81123a09de7:77803663-a5fc-460f-bd7e-759bacf8223f" 
style="margin: 0px; padding: 0px; float: none; display: inline;">
<PRE><CODE class="language-cpp">
    /// &lt;summary&gt;
    /// 設定儲存格公式於位元流.
    /// &lt;/summary&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;param name="Formula"&gt;The formula.&lt;/param&gt;
    /// &lt;param name="RowIndex"&gt;Index of the row.&lt;/param&gt;
    /// &lt;param name="ColumnIndex"&gt;Index of the column.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream SetFormula(Stream InputStream,int SheetIndex , string Formula, int RowIndex, int ColumnIndex)
    {
        //here, we must insert at least one sheet to the workbook. otherwise, Excel will say 'data lost in file'
        //So we insert three sheet just like what Excel does
        workbook = new HSSFWorkbook(InputStream);
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        HSSFSheet sheet1 = workbook.GetSheetAt(SheetIndex);
        sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex).SetCellFormula(Formula);
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 設定儲存格公式於檔案.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="InputStream"&gt;The input stream.&lt;/param&gt;
    /// &lt;param name="SheetIndex"&gt;Index of the sheet.&lt;/param&gt;
    /// &lt;param name="Formula"&gt;The formula.&lt;/param&gt;
    /// &lt;param name="RowIndex"&gt;Index of the row.&lt;/param&gt;
    /// &lt;param name="ColumnIndex"&gt;Index of the column.&lt;/param&gt;
    public static void SetFormula(string FileName,Stream InputStream, int SheetIndex, string Formula, int RowIndex, int ColumnIndex)
    {
        MemoryStream ms = SetFormula(InputStream, SheetIndex, Formula, RowIndex, ColumnIndex) as MemoryStream;
        WriteSteamToFile(ms, FileName);        
    }
    /// &lt;summary&gt;
    /// 建立新位元流並設定儲存格公式.
    /// &lt;/summary&gt;
    /// &lt;param name="Formula"&gt;The formula.&lt;/param&gt;
    /// &lt;param name="RowIndex"&gt;Index of the row.&lt;/param&gt;
    /// &lt;param name="ColumnIndex"&gt;Index of the column.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Stream SetFormula(string Formula, int RowIndex, int ColumnIndex)
    {
        //here, we must insert at least one sheet to the workbook. otherwise, Excel will say 'data lost in file'
        //So we insert three sheet just like what Excel does
        workbook = new HSSFWorkbook();
        InitializeWorkbook();
        MemoryStream ms = new MemoryStream();
        HSSFSheet sheet1 = workbook.CreateSheet();
        sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex).SetCellFormula(Formula);
        workbook.Write(ms);
        ms.Flush();
        return ms;
    }
    /// &lt;summary&gt;
    /// 建立新檔案並設定儲存格公式.
    /// &lt;/summary&gt;
    /// &lt;param name="FileName"&gt;Name of the file.&lt;/param&gt;
    /// &lt;param name="Formula"&gt;The formula.&lt;/param&gt;
    /// &lt;param name="RowIndex"&gt;Index of the row.&lt;/param&gt;
    /// &lt;param name="ColumnIndex"&gt;Index of the column.&lt;/param&gt;
    public static void SetFormula(string FileName, string Formula, int RowIndex, int ColumnIndex)
    {
        MemoryStream ms = SetFormula( Formula, RowIndex, ColumnIndex) as MemoryStream;
        WriteSteamToFile(ms, FileName);
    }
    #endregion</CODE></PRE></DIV> 
                                    </DIV>
<DIV class="article__navs">
<UL>
  <LI><A href="https://dotblogs.com.tw/killysss">回首頁</A></LI>                    
 </UL></DIV>
<P><INS class="adsbygoogle" style="display: block;" data-ad-format="auto" 
data-ad-slot="1709268749" data-ad-client="ca-pub-5120420174726287"></INS>
<SCRIPT>(adsbygoogle = window.adsbygoogle || []).push({});</SCRIPT>
 </P>
<DIV class="article__ralated-posts" data-url="/blog/userblogtagslist" 
data-sname="" data-bid="acb06f7f-d489-44ea-aa67-4dcbaaf06a24" data-cid="60fc6893-8802-4a4c-b09d-7ca445ba748f" 
data-tag=""></DIV>
<DIV class="article__serial-posts" data-url="/blog/userblogserieslist" 
data-sname="C#" data-bid="acb06f7f-d489-44ea-aa67-4dcbaaf06a24" data-cid="60fc6893-8802-4a4c-b09d-7ca445ba748f" 
data-serial=""></DIV></ARTICLE></DIV>
<DIV class="sidebar">
<DIV class="search-block mobi-hide">
<FORM action="/killysss/search" 
method="get"><INPUT name="q" type="text" placeholder="請用「空白」區分關鍵字" value=""><BUTTON><I 
class="fa fa-search"></I></BUTTON></FORM></DIV>
<DIV class="side-block"><HEADER class="side-block__header">
<H4>贊助商連結</H4></HEADER><INS class="adsbygoogle" style="width: 250px; height: 250px; display: inline-block;" 
data-ad-slot="8394930749" data-ad-client="ca-pub-5120420174726287"></INS>
<SCRIPT>(adsbygoogle = window.adsbygoogle || []).push({});</SCRIPT>
     </DIV></DIV><INPUT name="fnBlogDetail" id="fnBlogDetail" type="hidden">     
    
<INPUT name="fnView" id="fnView" type="hidden" value="/blog/updateviewcount">    
 </DIV></DIV></DIV><FOOTER class="page-footer">
<DIV class="center-container"><NAV class="footer-nav">
<UL>
  <LI><A href="javascript:void(0);" data-url="/home/policy" 
  data-lightbox="">服務規範</A></LI>                     
  <LI><A href="https://dotblogs.useresponse.com/knowledge-base" 
  target="_blank">使用說明</A></LI>                     
  <LI><A href="https://dotblogs.com.tw/contact">廣告刊登</A></LI>                 
</UL></NAV>
<DIV class="copyright">© 2017 點部落 Ver. 2017.7.10.2</DIV>
<DIV class="host"><A href="http://demoshop.tw/" target="_blank">電魔小鋪有限公司</A> 
製作、維運；<A href="http://www.itop.com.tw/" target="_blank">登豐數位科技</A> 提供資安檢測        
     </DIV></DIV></FOOTER>
<SCRIPT src="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/jquery-2.1.4.min.js"></SCRIPT>
     
<SCRIPT src="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/copyright_demoshop.tw_.js"></SCRIPT>
             
<SCRIPT src="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/addthis_widget.js" type="text/javascript"></SCRIPT>
     
<SCRIPT src="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/MathJax.js" type="text/javascript"></SCRIPT>
     
<SCRIPT src="excel讀寫使用NPOI%20Library%20%20林大貓%20-%20點部落_files/chart.js" type="text/javascript"></SCRIPT>
 </BODY></HTML>
